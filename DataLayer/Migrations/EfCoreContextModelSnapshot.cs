// <auto-generated />
using System;
using DataLayer.EfCode;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(EfCoreContext))]
    partial class EfCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Models.AreaOfInterest", b =>
                {
                    b.Property<int>("AreaOfInterestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("ISCode");

                    b.HasKey("AreaOfInterestId");

                    b.ToTable("AreaOfInterest");
                });

            modelBuilder.Entity("DataLayer.Models.AreaOfInterestReviewer", b =>
                {
                    b.Property<int>("AreaOfInterestReviewerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaOfInterestId");

                    b.Property<int>("ReviewerId");

                    b.HasKey("AreaOfInterestReviewerId");

                    b.HasIndex("AreaOfInterestId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("AreaOfInterestReviewer");
                });

            modelBuilder.Entity("DataLayer.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Affiliation");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("MailingAddress");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("DataLayer.Models.AuthorManuscript", b =>
                {
                    b.Property<int>("AuthorManuscriptId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<int>("AuthorOrder");

                    b.Property<int>("ManuscriptId");

                    b.HasKey("AuthorManuscriptId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ManuscriptId");

                    b.ToTable("AuthorManuscript");
                });

            modelBuilder.Entity("DataLayer.Models.Editor", b =>
                {
                    b.Property<int>("EditorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("EditorId");

                    b.ToTable("Editor");
                });

            modelBuilder.Entity("DataLayer.Models.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IssueNumber");

                    b.Property<DateTime>("PrintDate");

                    b.Property<int>("PublicationPeriod");

                    b.Property<DateTime>("PublicationYear");

                    b.Property<int>("VolumeNumber");

                    b.HasKey("IssueId");

                    b.ToTable("Issue");
                });

            modelBuilder.Entity("DataLayer.Models.Manuscript", b =>
                {
                    b.Property<int>("ManuscriptId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeginningPageNumber");

                    b.Property<DateTime>("DateAccepted");

                    b.Property<DateTime>("DateReceived");

                    b.Property<int>("EditorId");

                    b.Property<int>("IssueId");

                    b.Property<int>("ManuscriptStatus");

                    b.Property<string>("ManuscriptTitle");

                    b.Property<int>("NumberOfPagesOccupied");

                    b.Property<int>("OrderInIssue");

                    b.HasKey("ManuscriptId");

                    b.HasIndex("EditorId");

                    b.HasIndex("IssueId");

                    b.ToTable("Manuscript");
                });

            modelBuilder.Entity("DataLayer.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<string>("Message");

                    b.HasKey("NotificationId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DataLayer.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppropriatenessScore");

                    b.Property<int>("ClarityScore");

                    b.Property<int>("ContributionScore");

                    b.Property<DateTime>("DateManuscriptReceived");

                    b.Property<DateTime>("DateReviewed");

                    b.Property<int>("ManuscriptId");

                    b.Property<int>("MethodologyScore");

                    b.Property<bool>("RecommendationStatus");

                    b.Property<int>("ReviewerId");

                    b.HasKey("ReviewId");

                    b.HasIndex("ManuscriptId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("DataLayer.Models.Reviewer", b =>
                {
                    b.Property<int>("ReviewerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Affiliation");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("ReviewerId");

                    b.ToTable("Reviewer");
                });

            modelBuilder.Entity("DataLayer.Models.AreaOfInterestReviewer", b =>
                {
                    b.HasOne("DataLayer.Models.AreaOfInterest", "AreaOfInterest")
                        .WithMany("AreaOfInterestReviewers")
                        .HasForeignKey("AreaOfInterestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Reviewer", "Reviewer")
                        .WithMany("AreaOfInterestReviewers")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.AuthorManuscript", b =>
                {
                    b.HasOne("DataLayer.Models.Author", "Author")
                        .WithMany("AuthorManuscripts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Manuscript", "Manuscript")
                        .WithMany("AuthorManuscripts")
                        .HasForeignKey("ManuscriptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Manuscript", b =>
                {
                    b.HasOne("DataLayer.Models.Editor", "Editor")
                        .WithMany("Manuscripts")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Issue", "Issue")
                        .WithMany("Manuscripts")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Notification", b =>
                {
                    b.HasOne("DataLayer.Models.Author", "Author")
                        .WithMany("Notifications")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Review", b =>
                {
                    b.HasOne("DataLayer.Models.Manuscript", "Manuscript")
                        .WithMany("Reviews")
                        .HasForeignKey("ManuscriptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
